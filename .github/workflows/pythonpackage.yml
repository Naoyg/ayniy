name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  checks:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install flake8 black mypy
      run:
        python -m pip install --upgrade pip
        pip install flake8 black mypy flake8-isort
    - name: Lint with flake8
      run:
        flake8 . --max-line-length=99 --ignore=W503,E722
    - name: black
      run:
        black . --line-length 99 --exclude="docs"
    - name: mypy
      run:
        mypy --disallow-untyped-defs --ignore-missing-imports .

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pythonpackage.yml') }}
        restore-keys: ${{ runner.os }}-pip-${{ hashFiles('**/pythonpackage.yml') }}
    - name: Install for pytest
      run:
        python -m pip install --upgrade pip
        pip install pytest==5.3.5 pytest-cov==2.8.1
    - name: Install dependencies
      run:
        python -m pip install --upgrade pip
        pip install numpy==1.18.1
        pip install pandas==1.0.1
        pip install seaborn==0.10.0
        pip install scikit-learn==0.23.2
        pip install mlflow==1.10.0
        pip install optuna==2.0.0
        pip install torch==1.5.1
        pip install catboost==0.22 lightgbm==2.3.1 xgboost==1.0.2
        pip install -q https://github.com/pfnet-research/xfeat/archive/master.zip
    - name: Test with pytest
      env:
        PYTHONPATH: /working
      run:
        pytest tests/ --cov=. --cov-report=xml --junitxml=junit/test-results-${{ matrix.python-version }}.xml
    - name: Upload pytest test results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
